# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import service_pb2 as service__pb2


class MessageServerStub(object):
    """The service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUsers = channel.unary_stream(
                '/message_server.MessageServer/GetUsers',
                request_serializer=service__pb2.GetUsersRequest.SerializeToString,
                response_deserializer=service__pb2.GetUsersResponse.FromString,
                )
        self.SendMessage = channel.unary_unary(
                '/message_server.MessageServer/SendMessage',
                request_serializer=service__pb2.Message.SerializeToString,
                response_deserializer=service__pb2.MessageResponse.FromString,
                )
        self.GetPendingMessage = channel.unary_stream(
                '/message_server.MessageServer/GetPendingMessage',
                request_serializer=service__pb2.PendingMessageRequest.SerializeToString,
                response_deserializer=service__pb2.PendingMessageResponse.FromString,
                )
        self.MonitorMessages = channel.unary_stream(
                '/message_server.MessageServer/MonitorMessages',
                request_serializer=service__pb2.MonitorMessagesRequest.SerializeToString,
                response_deserializer=service__pb2.Message.FromString,
                )


class MessageServerServicer(object):
    """The service definition.
    """

    def GetUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPendingMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MonitorMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessageServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUsers': grpc.unary_stream_rpc_method_handler(
                    servicer.GetUsers,
                    request_deserializer=service__pb2.GetUsersRequest.FromString,
                    response_serializer=service__pb2.GetUsersResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=service__pb2.Message.FromString,
                    response_serializer=service__pb2.MessageResponse.SerializeToString,
            ),
            'GetPendingMessage': grpc.unary_stream_rpc_method_handler(
                    servicer.GetPendingMessage,
                    request_deserializer=service__pb2.PendingMessageRequest.FromString,
                    response_serializer=service__pb2.PendingMessageResponse.SerializeToString,
            ),
            'MonitorMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.MonitorMessages,
                    request_deserializer=service__pb2.MonitorMessagesRequest.FromString,
                    response_serializer=service__pb2.Message.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'message_server.MessageServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MessageServer(object):
    """The service definition.
    """

    @staticmethod
    def GetUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/message_server.MessageServer/GetUsers',
            service__pb2.GetUsersRequest.SerializeToString,
            service__pb2.GetUsersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/message_server.MessageServer/SendMessage',
            service__pb2.Message.SerializeToString,
            service__pb2.MessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPendingMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/message_server.MessageServer/GetPendingMessage',
            service__pb2.PendingMessageRequest.SerializeToString,
            service__pb2.PendingMessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MonitorMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/message_server.MessageServer/MonitorMessages',
            service__pb2.MonitorMessagesRequest.SerializeToString,
            service__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
